## node

### node.js 란

- WEB server 로 작동되는 node.js
  1. `var http = require('http');`
  2. `var fs = require('fs');`
  3. `var app = http.createServer(function(request,response){`
  4.    ` var url = request.url;`
  5.    ` if(request.url == '/'){`
  6. ​    `  url = '/index.html';`
  7.    ` }`
  8. ​    `if(request.url == '/favicon.ico'){`
  9. ​     `return response.writeHead(404);`
  10.   `  }`
  11. `    response.writeHead(200);`
  12. `    response.end(fs.readFileSync(__dirname + url));`
  13. `});`
  14. `app.listen(3000);`

#### 해석

12 —  `__dirname + url` 은 본문의 내용이 담겨있는 파일의 위치 + 전달된 파일 이름 ex)/Desktop/……./1.html 과 같은 형식. fs.readFileSync(__dirname + url)) - fs 파일 readFileSync 파일로 부터 읽는다. response.end (데이터)— 전송하는 데이터

### URL 의 이해

`http://opentutorials.org:3000/main?id=HTML&page=12`

Protocol / host(domain) /          port/path ? query string

- protocol
  1. 통신 규칙 -> 사용자가 서버에 접속할때 어떤방식으로 접속할것인가

- Host(domain)
  1. 도메인 이름
  2. 인터넷어 접속되어있는 호스트 이름 

- port
  1. 한대의 컴퓨터 안에 여러개의 서버가 존재할수있음 -> 각각 서버에 숫자로 이름을 부여함
  2. 가장 유명한 port 는 80 이므로 port 가 80일경우 생략해도된다.(기본값 , 약속)

- path
  1. path 는 어떤 directory  에 어떤 file 인지 나타낸다.

- query string
  1. 웹서버에게 데이터를 전달할수있다.
  2. ?로 시작하며 값과 값은 &을 쓴다.
  3. 값의 이름과 값은 = 로 구분한다.

### require() 

####   Module? 모듈?

- module 은 외부에 영향을 받지 않는 독립된, 재사용 가능한 코드들의 묶음 이다.
  1. 재사용 가능한 코드 —> 어떤 시점에 쓰여진 프로그램의 일부 또는 전부를 이후 다른 프로그램을 만들때 사용하는것
  2. 장황한 작업에 소비하는 시간과 에너지를 절약하는 전형적 기법이다.
  3. ex) 라이브러리

- OOP 의 Encapsulation 과 동일한 개념이다.

  1. OOP —> object oriented programming ( 객체지향 프로그래밍) 
     1. 프로그램을 단순히 데이터와 처리 방법으로 나누는 것이아니라 수많은 객체라는 기본 단위로 나누고 이 객체들의 상호작용으로 서술 하는 방식. 
     2. javascript 의 경우 prototype , function 이 사용됬다.    

  2. Encapsulation
     1. 프로그램의 세부 구현을 외부로 드러나지 않도록 특정 모듈 내부로 감추는 것이다.
     2. 내부 구현은 감추고(=정보 은닉) 모듈 내에서의 응집도를 높이며, 외부로의 노출을 최소화하여 모듈간의 결합도를 떨어뜨리는 개념은 거의 대부분 언어에 녹아있다.

- 모듈로 API 를 묶어줌에 변수나 함수들의 name space 를 보장해주고, 모듈화를 통한 기능적인 코딩이 가능해진다.

  1. API 
     1. Application programming interface
     2. 응용 프로그램에서 사용 할 수 있도록 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스

  2. 변수나 함수들의 name space
     1. 각각의 name space 에서는 같은 변수나 함수 이름을 사용할 순 없지만 영역이 다르면 변수나 함수명이 같을수 있다

- NodeJS 에서는 require 메서드를 통해 외부 모듈을 가져올 수 있다. require 메서드는 node 가 local object 에 추가한 메서드로서 다음과 같이 파라미터로 추가할 모듈의 파일 경로값을 받는다.

  1. require('파일 경로');

  `//some.js `

  `console.log('Greeting from some.js!');`

  을 만들고  app.js 에서

  `//app,js`

  `require('./some.js');` 

  만든후 node app.js 를 하면 Greeting from some.js! 가 실행되어 콘솔창에 메세지가 표시된다.