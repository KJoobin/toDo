### 데이터베이스

- 방대하다.
- 각개격파 보다는 핵심을 배운다
- 입력과 출력을 파악하면 데이터베이스의 반을 햇다고 생각하면된다
- 입력은 
  - 생성 Create
  - 수정 Update
  - 삭제 Delete

노 나눌수있다.

- 출력은
  - 읽기 Read

------

- 파일은 목록이 많을경우 
  - 필터? 원하는자료에 원치않는 노이즈 까지 나올수있다.
  - 정렬이 힘들다.
  - display 와 nondisplay를 설정할수 없다.

- 엑셀을 사용(databases)
  - 필터와 정렬을 nondisplay를 쉽게 할수있다.

- 파일보다는 엑셀이 조금더 database 에 가깝다

------

### database 를 사용하는이유?

- 엑셀과 데이터베이스의 공통점
  - 표로 보여준다
  - 필터기능을 만들수있다.





- 차이점
  - databases 는 컴퓨터언어로 기능을 실현할수있다. (Select * FROM ? WHERE ? = " ? ")
  - 엑셀은 클릭? 단축기로 실행한다.

------

### mysql 사용법

- **Cd /usr/local/mysql/bin**
- . /mysql(mysql을 사용하겠다.) -u(유저)root(유저이름) -p(패스워드) 
- ./mysql -uroot -p
- 패스워드 입력

------

### mySQL 구조

- 정보를 표에 저장한다 ( table ) 
- 연관된 정보와 연관되지않은 정보를 나누어서 database(스키마) 라는 폴더(?) 에 나눈다.
- 스키마 ? 는 표들을 서로 그루핑하는 일종의 폴더이다. 연관되는 표(정보) 끼리 나누는 것.
- 스키마들 끼리 모으면 database server 가 된다.

### MySQL 서버 접속

- 자체 보안이 있다.
- 권한을 설정할수있다.( 차등적으로 )
- root 로 들어가는건 좋지않다.( 모든권한을 사용할수있다. )
  - 별도의 사용자를 지정하는것이 좋다.

- MySQL password forgot 이라는 키워드로 검색하면 찾을수 있다.



- ./mysql -u -p 까지 들어가면 databases server 안에 들어온것이다.

------

### 스키마(schema) 사용 방법

- databases sever 에 들어온 상태에서 **CREATE DATABASE (name 이름 설정**);
- delete 하고싶을경우 **DROP DATABASE (name 설정한 이름);**
- 만든 스키마를 보고싶으면 **SHOW DATABASES;**
- 만든 스키마를 실행하고싶을경우 **ㅐ**

------

### SQL 과 테이블 구조

Structured Query Language 

1. Structured : 표를 작성하는것 정리정돈을 하는것 -- 구조화 되어있다.
2. Query : 데이터를 넣어줘 읽어줘 수정 삭제 스키마 만들기 -- 요청한다, 질의하다
3. Language : 데이터 베이스도 이해할수있고 나도 이해할수있는 -- 언어

- SQL 의 2가지 특징
  1. 쉽다.
  2. 중요하다.
     - 관계형 데이터베이스 라는 카테고리에 속하는 언어이다.
     - 표준화가 되어있다.
     - 압도적인 다수의 데이터베이스 언어를 SQL 로 사용된다.
  3. 가성비가 된다!

#####용어정리

- 표 ( table )
  - x 축은 row, record, 행 ( 데이터 하나하나 )
  - y 축은 column, 열 ( 데이터의 구조 )

------

### MySQL 테이블 생성

- Create table in my SQL <--- 검색
- 문법의 대한 설명을 보고 배운다.
- 어렵다.

- create table in my SQL cheat sheet <--- 검색



- create table topic(
- id INT(11) NOT NULL AUTO_INCREMENT,                   // 11은 어디까지 노출할것인가 보통 11을 쓴다.; INT 은 데이타 타입 NOT NULL 은 값이 없는값을 추가하는걸 원치않는다.
-  title VARCHAR(100) NOT NULL,                //100글자까지 // VAR CHAR 는 255개의 문자까지 허용 // 공색을 허용하지 않는다.
- description TEXT NULL,                       //   VARCHAR 과 TEXT 는 크기의 차이( TEXT > VARCHAR )
- created DATETIME NOT NULL,           //
- author VARCHAR(30) NULL,              //

- profile VARCHAR(100) NULL,            //
- PRIMARY KEY(id)                            // id 는 primary key( 메인키 ) 이다. Id column 은 중복되면 안된다 라는 신호
- )

------

### create data

- **SHOW TABLES**; 		// 생성된 table 을 확인한다.

- **DESC topic**;    	       //topic 의 description 이 나온다.

- **INSERT INTO topic (title,description,created,author,profile) VALUES("title  내용","description 내용","NOW()"," author 내용","profile 내용");**

  //Why id 는 적지않나? id 값은 자동으로 증가하기때문에 적지않아도 자동으로 생성된다.//

- **SELECT * FROM topic**         //topic 에서(FROM) 가져온다 (SELECT); 

- INSERT SELECT CREATE 는 많이사용된다.  ( INSERT 는 업데이트 ?? ) ( SELECT 는 읽기) ( CREATE 는 추가) 

  읽기는 많이 변화되어 사용하여 어렵다.

- **SELECT (  ,   ) FROM topic;**           // ( , ) 안에 내용만 포함하여 출력된다. ()는 쓰지 않는다.
- **SELECT ( , ) FROM ( ) WHERE author = "egoing";**  // 프롬() 에서 ( , ) colum 을 출력하는데 author 가 "egoing" 인 것들 중에 출력된다.
- **WHERE ( =  ) ORDER BY id DESC;**          id가 큰순서대로 출력된다. 

- DATA가 너무많을경우 SELECT * 를 하면 컴퓨터가 멈춰버린다...

  그럴경우 맨마지막에 LIMIT 2; 를 쓸경우 위에서 2개만 출력이된다.

- DATA 를 잘한다 --> 원하는 DATA만을 잘 뽑아온다 --> SELECT 를 잘쓴다.